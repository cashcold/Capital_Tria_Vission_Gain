import React, { Component } from 'react';
import axios from 'axios';
import './CurrencyConverter.css';

class CurrencyConverter extends Component {
  state = {
    rates: {},
    loading: true,
    error: null,
    darkMode: true,
    showAll: false,
  };

  currencies = [
  { code: 'USD', label: 'üá∫üá∏ USD' },
  { code: 'EUR', label: 'üá™üá∫ EUR' },
  { code: 'GBP', label: 'üá¨üáß GBP' },
  { code: 'XOF', label: 'üá∏üá≥ XOF (CFA)' },
  { code: 'GHS', label: 'üá¨üá≠ GHS' },
  { code: 'CAD', label: 'üá®üá¶ CAD' },
  { code: 'JPY', label: 'üáØüáµ JPY' },
  { code: 'AUD', label: 'üá¶üá∫ AUD' },
  { code: 'CNY', label: 'üá®üá≥ CNY' },
  { code: 'INR', label: 'üáÆüá≥ INR' },
  { code: 'ZAR', label: 'üáøüá¶ ZAR' },
  { code: 'NGN', label: 'üá≥üá¨ NGN' },
  { code: 'BRL', label: 'üáßüá∑ BRL' },
  { code: 'CHF', label: 'üá®üá≠ CHF' },
  { code: 'SEK', label: 'üá∏üá™ SEK' },
  { code: 'SGD', label: 'üá∏üá¨ SGD' },
  { code: 'RUB', label: 'üá∑üá∫ RUB' },
  { code: 'NZD', label: 'üá≥üáø NZD' },
  { code: 'MXN', label: 'üá≤üáΩ MXN' },
  { code: 'SAR', label: 'üá∏üá¶ SAR' },
  { code: 'AED', label: 'üá¶üá™ AED' },
  { code: 'EGP', label: 'üá™üá¨ EGP' },
  { code: 'TRY', label: 'üáπüá∑ TRY' },
  { code: 'PLN', label: 'üáµüá± PLN' },
  { code: 'DKK', label: 'üá©üá∞ DKK' },
  { code: 'NOK', label: 'üá≥üá¥ NOK' },
  { code: 'CZK', label: 'üá®üáø CZK' },
  { code: 'HUF', label: 'üá≠üá∫ HUF' },
  { code: 'ILS', label: 'üáÆüá± ILS' },
  { code: 'KRW', label: 'üá∞üá∑ KRW' },
  { code: 'THB', label: 'üáπüá≠ THB' },
  { code: 'MYR', label: 'üá≤üáæ MYR' },
  { code: 'IDR', label: 'üáÆüá© IDR' },
  { code: 'PHP', label: 'üáµüá≠ PHP' },
  { code: 'PKR', label: 'üáµüá∞ PKR' },
  { code: 'KES', label: 'üá∞üá™ KES' },
  { code: 'GMD', label: 'üá¨üá≤ GMD' },
  { code: 'MAD', label: 'üá≤üá¶ MAD' },
  { code: 'TND', label: 'üáπüá≥ TND' },
  { code: 'UAH', label: 'üá∫üá¶ UAH' },
  { code: 'QAR', label: 'üá∂üá¶ QAR' },
  { code: 'BHD', label: 'üáßüá≠ BHD' },
  { code: 'OMR', label: 'üá¥üá≤ OMR' },
  { code: 'KWD', label: 'üá∞üáº KWD' },
  { code: 'JOD', label: 'üáØüá¥ JOD' },
  { code: 'LBP', label: 'üá±üáß LBP' },
  { code: 'SDG', label: 'üá∏üá© SDG' },
  { code: 'TZS', label: 'üáπüáø TZS' },
  { code: 'UGX', label: 'üá∫üá¨ UGX' },
  { code: 'MWK', label: 'üá≤üáº MWK' },
  { code: 'MUR', label: 'üá≤üá∫ MUR' },
  { code: 'XAF', label: 'üá®üá≤ XAF' },
  { code: 'XCD', label: 'üá¶üá¨ XCD' },
  { code: 'XPF', label: 'üáµüá´ XPF' },
  { code: 'AFN', label: 'üá¶üá´ AFN' },
  { code: 'ALL', label: 'üá¶üá± ALL' },
  { code: 'AMD', label: 'üá¶üá≤ AMD' },
  { code: 'ANG', label: 'üá≥üá± ANG' },
  { code: 'AOA', label: 'üá¶üá¥ AOA' },
  { code: 'ARS', label: 'üá¶üá∑ ARS' },
  { code: 'AWG', label: 'üá¶üáº AWG' },
  { code: 'AZN', label: 'üá¶üáø AZN' },
  { code: 'BAM', label: 'üáßüá¶ BAM' },
  { code: 'BBD', label: 'üáßüáß BBD' },
  { code: 'BDT', label: 'üáßüá© BDT' },
  { code: 'BGN', label: 'üáßüá¨ BGN' },
  { code: 'BIF', label: 'üáßüáÆ BIF' },
  { code: 'BMD', label: 'üáßüá≤ BMD' },
  { code: 'BND', label: 'üáßüá≥ BND' },
  { code: 'BOB', label: 'üáßüá¥ BOB' },
  { code: 'BSD', label: 'üáßüá∏ BSD' },
  { code: 'BTN', label: 'üáßüáπ BTN' },
  { code: 'BWP', label: 'üáßüáº BWP' },
  { code: 'BYN', label: 'üáßüáæ BYN' },
  { code: 'BZD', label: 'üáßüáø BZD' },
  { code: 'CDF', label: 'üá®üá© CDF' },
  { code: 'CLP', label: 'üá®üá± CLP' },
  { code: 'COP', label: 'üá®üá¥ COP' },
  { code: 'CRC', label: 'üá®üá∑ CRC' },
  { code: 'CUC', label: 'üá®üá∫ CUC' },
  { code: 'CUP', label: 'üá®üá∫ CUP' },
  { code: 'CVE', label: 'üá®üáª CVE' },
  { code: 'DJF', label: 'üá©üáØ DJF' },
  { code: 'DOP', label: 'üá©üá¥ DOP' },
  { code: 'DZD', label: 'üá©üáø DZD' },
  { code: 'ERN', label: 'üá™üá∑ ERN' },
  { code: 'ETB', label: 'üá™üáπ ETB' },
  { code: 'FJD', label: 'üá´üáØ FJD' },
  { code: 'FKP', label: 'üá´üá∞ FKP' },
  { code: 'GEL', label: 'üá¨üá™ GEL' },
  { code: 'GGP', label: 'üá¨üá¨ GGP' },
  { code: 'GIP', label: 'üá¨üáÆ GIP' },
  { code: 'GNF', label: 'üá¨üá≥ GNF' },
  { code: 'GTQ', label: 'üá¨üáπ GTQ' },
  { code: 'GYD', label: 'üá¨üáæ GYD' },
  { code: 'HKD', label: 'üá≠üá∞ HKD' },
  { code: 'HNL', label: 'üá≠üá≥ HNL' },
  { code: 'HRK', label: 'üá≠üá∑ HRK' },
  { code: 'HTG', label: 'üá≠üáπ HTG' },
  { code: 'IMP', label: 'üáÆüá≤ IMP' },
  { code: 'IQD', label: 'üáÆüá∂ IQD' },
  { code: 'IRR', label: 'üáÆüá∑ IRR' },
  { code: 'ISK', label: 'üáÆüá∏ ISK' },
  { code: 'JEP', label: 'üáØüá™ JEP' },
  { code: 'JMD', label: 'üáØüá≤ JMD' },
  { code: 'KGS', label: 'üá∞üá¨ KGS' },
  { code: 'KHR', label: 'üá∞üá≠ KHR' },
  { code: 'KMF', label: 'üá∞üá≤ KMF' },
  { code: 'KPW', label: 'üá∞üáµ KPW' },
  { code: 'KYD', label: 'üá∞üáæ KYD' },
  { code: 'KZT', label: 'üá∞üáø KZT' },
  { code: 'LAK', label: 'üá±üá¶ LAK' },
  { code: 'LKR', label: 'üá±üá∞ LKR' },
  { code: 'LRD', label: 'üá±üá∑ LRD' },
  { code: 'LSL', label: 'üá±üá∏ LSL' },
  { code: 'LTL', label: 'üá±üáπ LTL' },
  { code: 'LVL', label: 'üá±üáª LVL' },
  { code: 'LYD', label: 'üá±üáæ LYD' },
  { code: 'MDL', label: 'üá≤üá© MDL' },
  { code: 'MGA', label: 'üá≤üá¨ MGA' },
  { code: 'MKD', label: 'üá≤üá∞ MKD' },
  { code: 'MMK', label: 'üá≤üá≤ MMK' },
  { code: 'MNT', label: 'üá≤üá≥ MNT' },
  { code: 'MOP', label: 'üá≤üá¥ MOP' },
  { code: 'MRU', label: 'üá≤üá∑ MRU' },
  { code: 'MVR', label: 'üá≤üáª MVR' },
  { code: 'MZN', label: 'üá≤üáø MZN' },
  { code: 'NAD', label: 'üá≥üá¶ NAD' },
  { code: 'NIO', label: 'üá≥üáÆ NIO' },
  { code: 'NPR', label: 'üá≥üáµ NPR' },
  { code: 'PEN', label: 'üáµüá™ PEN' },
  { code: 'PGK', label: 'üáµüá¨ PGK' },
  { code: 'PYG', label: 'üáµüáæ PYG' },
  { code: 'RON', label: 'üá∑üá¥ RON' },
  { code: 'RSD', label: 'üá∑üá∏ RSD' },
  { code: 'RWF', label: 'üá∑üáº RWF' },
  { code: 'SBD', label: 'üá∏üáß SBD' },
  { code: 'SCR', label: 'üá∏üá® SCR' },
  { code: 'SHP', label: 'üá∏üá≠ SHP' },
  { code: 'SLL', label: 'üá∏üá± SLL' },
  { code: 'SOS', label: 'üá∏üá¥ SOS' },
  { code: 'SRD', label: 'üá∏üá∑ SRD' },
  { code: 'STD', label: 'üá∏üáπ STD' },
  { code: 'SYP', label: 'üá∏üáæ SYP' },
  { code: 'SZL', label: 'üá∏üáø SZL' },
  { code: 'TJS', label: 'üáπüáØ TJS' },
  { code: 'TMT', label: 'üáπüá≤ TMT' },
  { code: 'TOP', label: 'üáπüá¥ TOP' },
  { code: 'TTD', label: 'üáπüáπ TTD' },
  { code: 'TWD', label: 'üáπüáº TWD' },
  { code: 'UYU', label: 'üá∫üáæ UYU' },
  { code: 'UZS', label: 'üá∫üáø UZS' },
  { code: 'VEF', label: 'üáªüá™ VEF' },
  { code: 'VND', label: 'üáªüá≥ VND' },
  { code: 'VUV', label: 'üáªüá∫ VUV' },
  { code: 'WST', label: 'üáºüá∏ WST' },
  { code: 'YER', label: 'üáæüá™ YER' },
  { code: 'ZMW', label: 'üáøüá≤ ZMW' },
  { code: 'ZWL', label: 'üáøüáº ZWL' }
];

  componentDidMount() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
      this.setState({ darkMode: false });
    }

    this.fetchRates();
    this.interval = setInterval(this.fetchRates, 60000);
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  fetchRates = () => {
    axios.get('https://open.er-api.com/v6/latest/USD')
      .then(response => {
        const data = response.data.rates;
        const usdToGHS = data['GHS'];

        if (!usdToGHS) throw new Error("GHS rate not available");

        const calculatedRates = {};
        this.currencies.forEach(({ code }) => {
          const usdToCurrency = data[code];
          if (usdToCurrency) {
            calculatedRates[code] = usdToGHS / usdToCurrency;
          }
        });

        // Store all rates for "view all"
        this.setState({ 
          rates: calculatedRates, 
          allRates: data, 
          loading: false, 
          error: null 
        });
      })
      .catch(() => {
        this.setState({ error: 'Error loading currency data.', loading: false });
      });
  };

  toggleTheme = () => {
    this.setState(prev => {
      const newMode = !prev.darkMode;
      localStorage.setItem('theme', newMode ? 'dark' : 'light');
      return { darkMode: newMode };
    });
  };

  handleShowAll = () => {
    this.setState({ showAll: true });
  };

  handleCloseAll = () => {
    this.setState({ showAll: false });
  };

  render() {
    const { rates, loading, error, darkMode, showAll, allRates } = this.state;
    const themeClass = darkMode ? 'dark-mode' : 'light-mode';

    return (
      <div className={`currency-container ${themeClass}`}>
        <button className="theme-toggle-btn" onClick={this.toggleTheme}>
          {darkMode ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode'}
        </button>
        <h2 className="currency-title">üí± Live Exchange Rates to GHS</h2>
        {loading && <p className="currency-loading">Loading exchange rates...</p>}
        {error && <p className="currency-error">{error}</p>}
        {!loading && !error && (
          <>
           <ul className="currency-list">
              {this.currencies.slice(0, 5).map(({ code, label }) => (
                <li key={code} className="currency-item">
                  <strong>{label}</strong> = {rates[code]?.toFixed(2)} GHS
                </li>
              ))}
            </ul>
            <button className="view-all-btn" onClick={this.handleShowAll}>
              View All Currencies
            </button>
            {showAll && allRates && (
              <div className="all-currencies-popup">
                <div className="all-currencies-content">
                  <h3>All Currencies to GHS</h3>
                  <ul className="all-currencies-list">
                    {Object.entries(allRates).map(([code, rate]) => {
                      const currencyObj = this.currencies.find(c => c.code === code);
                      const flag = currencyObj ? currencyObj.label.split(' ')[0] : '';
                      return (
                        <li key={code}>
                          <strong>{flag} {code}</strong> = {(allRates['GHS'] / rate).toFixed(2)} GHS
                        </li>
                      );
                    })}
                  </ul>
                  <button className="close-btn" onClick={this.handleCloseAll}>Close</button>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    );
  }
}

export default CurrencyConverter;